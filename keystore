#!/usr/bin/env bash
# MacOS command line utility to manage custom app keys and passwords in Mac Keychain
# Intended to be a simple wrapper around key storage commands.
# Make sure this file is your PATH or symlink it to a file in your PATH
# e.g. ln -s app-secret-store/keystore ./keystore

# Exit if errors encountered or trying to use an undeclared variable
set -o nounset #-o errexit

# If using zsh the copy completions file 
# The following code can/should be left commented out as the completions file  
# only needs copied once or when/if it is changed
ZSH_COMPLETIONS_DIR=~/.my-zsh-completions
if [ -d "$ZSH_COMPLETIONS_DIR" ]; then
  script_path=$(realpath $(which keystore))
  completions_path=${script_path//\/keystore/\/_keystore}
  cp "$completions_path" "$ZSH_COMPLETIONS_DIR"
fi

# Check for keystore.txt file in current directory
KEYSTORE_FILE=./keystore.txt
if [ "$KEYSTORE_FILE" ]; then
  #mapfile -t a < $KEYSTORE_FILE
  IFS=$'\n' read -d '' -r -a secrets < $KEYSTORE_FILE  
  for i in "${secrets[@]}"
  do
	  echo "app secret - $i"
  done  
fi

readonly kind="custom app secrets"

if [ "$#" -lt 1 ] || [ "$#" -gt 3 ]; then
  echo "Expected 1 or 2 arguments, the name of the function to perform and any argument to pass to it ..."
  echo "usage:"
  echo ""
  echo "store add"
  echo "store delete"
  echo "store find"
  echo ""

  exit 1
fi

add() {
  echo ""
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "...command requires 2 parameters, the password name and the actual password (or GEN to generate one) "
  elif [ $2 = "GEN" ]; then
    pass=$(pwgen)
    echo "security add-generic-password -a ${USER} -s $1 -w $pass -U -D $kind"
    security add-generic-password -a ${USER} -s $1 -w $pass -U -D "$kind"  
  else
    echo "security add-generic-password -a ${USER} -s $1 -w $2 -U -D $kind"
    security add-generic-password -a ${USER} -s $1 -w $2 -U -D "$kind"
  fi
  echo ""
}

delete() {
  echo ""
  if [ -z "$1" ]; then
    echo "...command requires 1 parameter, the password name "
  else
    echo "security delete-generic-password -a ${USER} -s $1"
    security delete-generic-password -a ${USER} -s $1 
  fi
  echo ""
}

find() {
  echo ""
  if [ -z "$1" ]; then
    echo "...command requires 1 parameter, the password name "
  else
    echo "security find-generic-password -a ${USER} -s $1 -w"
    security find-generic-password -a ${USER} -s $1 -w
  fi
  echo ""
}

# call function 
"$@"

exit 0

